{"tagline":"This is the project from rails rumble that has music streaming","body":"# RubyFloyd\r\n\r\n## About the project\r\n\r\n_RubyFloyd_ is a project for RailsRumble contest\r\n\r\n### Contributors\r\n\r\n\r\n* [Ian Rodriguez](https://github.com/ianrgz) **the full stack**\r\n* [Antonio Chávez](https://github.com/TheNaoX) **the back-end**\r\n* [Narciso Guillén](https://github.com/narcisoguillen) **JavaScript wizard**\r\n* [Tonatiuh Nuñez](https://github.com/tonatiuh) **the designer**\r\n\r\n## Installation\r\n\r\n    git clone git@github.com:railsrumble/r12-team-455.git\r\n    cp config/database.yml.sample config/database.yml # Add your postgres configuration\r\n    bundle install\r\n    rake db:migrate\r\n\r\n## API guide\r\n\r\n### Before start\r\n\r\nNotice that you need to add the authentication token to every request appended at the end of the url, like: `http://wave_music.colimacolectivo.com/api/songs?auth_token=JbeRuU5pYPTbQ2FZWdE5` which is returned as json when you open a new session.\r\n\r\n#### API authentication\r\n\r\nAlso you need to register your application on [developers page](http://wave_music.colimacolectivo.com/developers), and you'll receive your access token and is necessary to include it on each request like, `http://wave_music.colimacolectivo.com/api/songs?auth_token=JbeRuU5pYPTbQ2FZWdE5&access_token=5Ome50rt0ft0k3n`\r\n\r\nNOTICE THIS IS NOT YET IMPLEMENTED DON'T WORRY\r\n\r\n### Songs interface\r\n\r\nThere are many ways to interact with the songs API interface, the most important thing is that the interface provides you the data as JSON format, which is the most common and easy way to create JavaScript objects from API response.\r\n\r\nThe following route provides you the entire list of songs stored into the application library\r\n\r\n    GET /api/songs\r\n\r\nAnd this is the sample response:\r\n\r\n    {\r\n      \"songs\": [\r\n        {\r\n            \"id\": 1,\r\n            \"name\": \"Fade to black\",\r\n            \"artist\": \"Metallica\",\r\n            \"album\": \"Ride the Lightning\",\r\n            \"album_art_url\": \"/system/songs/album_arts/000/000/001/large/77094516.png?1352223754\",\r\n            \"filename\": \"04_Fade_To_Black.mp3\",\r\n            \"duration\": \"415000\",\r\n            \"url\": \"/uploads/song/file/1/04_Fade_To_Black.mp3\"\r\n        },\r\n        {\r\n            \"id\": 2,\r\n            \"name\": \"Creeping death\",\r\n            \"artist\": \"Metallica\",\r\n            \"album\": \"Ride the Lightning\",\r\n            \"album_art_url\": \"/system/songs/album_arts/000/000/002/large/77094516.png?1352224213\",\r\n            \"filename\": \"07_Creeping_Death.mp3\",\r\n            \"duration\": \"396000\",\r\n            \"url\": \"/uploads/song/file/2/07_Creeping_Death.mp3\"\r\n        },\r\n        {\r\n            \"id\": 3,\r\n            \"name\": \"Monkey Punch\",\r\n            \"artist\": \"Avesta\",\r\n            \"album\": \"Unknown Album\",\r\n            \"album_art_url\": \"/system/songs/album_arts/000/000/003/large/default_album_300_g4.png?1352351384\",\r\n            \"filename\": \"Avesta_-_Monkey_Punch__Original_Mix_.mp3\",\r\n            \"duration\": null,\r\n            \"url\": \"/uploads/song/file/3/Avesta_-_Monkey_Punch__Original_Mix_.mp3\"\r\n        },\r\n        {\r\n            \"id\": 4,\r\n            \"name\": \"I just had sex\",\r\n            \"artist\": \"The Lonley Island\",\r\n            \"album\": \"Unknown Album\",\r\n            \"album_art_url\": \"/system/songs/album_arts/000/000/004/large/default_album_300_g4.png?1352351793\",\r\n            \"filename\": \"03._I_Just_Had_Sex__Ft._Akon__iM1.mp3\",\r\n            \"duration\": null,\r\n            \"url\": \"/uploads/song/file/4/03._I_Just_Had_Sex__Ft._Akon__iM1.mp3\"\r\n        }\r\n      ]\r\n    }\r\n\r\nYou can test this response by typing in your browser adding the following url after you are logged in the application.\r\n  \r\n    http://wave_music.colimacolectivo.com/api/songs\r\n\r\nThen using the previous ids you can get a specific song attributes\r\n\r\n    GET    /api/songs/:id\r\n\r\nAnd this is the response\r\n  \r\n    http://wave_music.colimacolectivo.com/api/songs/1\r\n    {\r\n      \"song\": {\r\n        \"id\": 1,\r\n        \"name\": \"Fade to black\",\r\n        \"artist\": \"Metallica\",\r\n        \"album\": \"Ride the Lightning\",\r\n        \"album_art_url\": \"/system/songs/album_arts/000/000/001/large/77094516.png?1352223754\",\r\n        \"filename\": \"04_Fade_To_Black.mp3\",\r\n        \"duration\": \"415000\",\r\n        \"url\": \"/uploads/song/file/1/04_Fade_To_Black.mp3\"\r\n      }\r\n    }\r\n\r\nThis is the search function and it's called by `GET` http method:\r\n\r\n    GET    /api/songs/search?name=something\r\n\r\nAnd this is the response, returns the songs as array list\r\n\r\n    http://wave_music.colimacolectivo.com/api/songs/search?name=fade\r\n\r\n    {\r\n      \"songs\": [\r\n        {\r\n            \"id\": 1,\r\n            \"name\": \"Fade to black\",\r\n            \"artist\": \"Metallica\",\r\n            \"album\": \"Ride the Lightning\",\r\n            \"album_art_url\": \"/system/songs/album_arts/000/000/001/large/77094516.png?1352223754\",\r\n            \"filename\": \"04_Fade_To_Black.mp3\",\r\n            \"duration\": \"415000\",\r\n            \"url\": \"/uploads/song/file/1/04_Fade_To_Black.mp3\"\r\n        }\r\n      ]\r\n    }\r\n\r\n### Playlists interface\r\n\r\nTechnincally it has the same behavior as songs interface but instead of doing requests with `/api/songs` you should do it with `/api/playlists`\r\n\r\nThe generic response is:\r\n  \r\n    {\r\n      \"playlists\": [\r\n        {\r\n            \"id\": 1,\r\n            \"name\": 'Favorite songs',\r\n            \"user_id\": 1,\r\n            \"songs\": [1,2,3,4,5] // notice this is an array of ids, you can fetch that songs info by id with \"GET /api/songs/:id\" for each one of those\r\n        }\r\n      ]\r\n    }\r\n\r\nThis is the feature set of playlists:\r\n\r\nYou can create a new playlist with the following url and method\r\n\r\n    POST   /api/playlists/\r\n\r\nAnd send the `data` as JSON like the following one:\r\n\r\n    { name: 'My favorite songs' }\r\n\r\nWith the following response:\r\n\r\n    { status: 200, message: 'Successfully created playlist...', playlist: 1 }\r\n\r\nThis one songs to the playlist defined by id:\r\n\r\n    POST   /api/playlists/:id/add_songs\r\n\r\nAnd send the data as JSON like:\r\n\r\n    {id: playlist_id, songs: [1,2,3,4,5]} // as array of ids\r\n\r\n### Uploading songs\r\n\r\nYou can upload songs with a POST request as JSON, but it takes time to complete so you can create a event handler in order to manage timeouts and javascript connections to wait until the upload is done, or a callback\r\n\r\n    POST   /api/uploads\r\n\r\nAnd this is the required data\r\n\r\n    {name: 'my song', artist: 'my artsit', file: some sort of file attached }\r\n\r\n### Logging users\r\n\r\nExists this url for logging in users and have access to all the features described below\r\n  \r\n    POST /api/sessions\r\n\r\nWith data defined as following\r\n\r\n    {user_login: { email: 'user@example.com', password: 'supersecret' }}\r\n\r\nAnd destroying sessions:\r\n\r\n    DELETE /api/sessions/:id\r\n\r\nWith data:\r\n\r\n    {id: user_id}\r\n\r\nAnd that's it, if you have suggestions please feel free to add issues and email me cavjzz@gmail.com in order to let me know if something is behaving wrong or documentation is incomplete\r\n\r\nCopyright (C) 2012  RubyFloyd\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Wave music","google":""}